{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4dae4916_06c052c5",
        "filename": "drivers/dma-buf/heaps/page_pool.c",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2022-04-25T23:33:06Z",
      "side": 0,
      "message": "Hmm, what does this fix exactly? mod_node_page_state ultimately maps to a couple of atomic adds. I\u0027m not seeing why that needs to be done while holding the mutex. The unlock in dmabuf_page_pool_remove looks like it comes after mod_node_page_state to avoid unlocking inside the if block.",
      "revId": "c43d296cdf480f83b569723f9fe8bb8ba4a1de67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec772c6c_93d7022d",
        "filename": "drivers/dma-buf/heaps/page_pool.c",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1945845
      },
      "writtenOn": "2022-04-26T01:11:16Z",
      "side": 0,
      "message": "Hrm. Yea, your description seems to match my recollection (the pool lock protects the pool data, not the page state).\n\nBut I\u0027m guessing the issue is should the dmabuf_page_pool_remove() path preempt dmabuf_page_pool_add() right after the unlock, you could end up with negative stats for a moment, so serializing the stats here would avoid that.",
      "parentUuid": "4dae4916_06c052c5",
      "revId": "c43d296cdf480f83b569723f9fe8bb8ba4a1de67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}
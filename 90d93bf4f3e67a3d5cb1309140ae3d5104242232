{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e35ff274_fa0e1a7d",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 412,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-31T15:57:10Z",
      "side": 1,
      "message": "\"include/**/*.h\" should be a superset of \"include/**/uapi/*.h\", so we should be able to omit the latter.",
      "range": {
        "startLine": 411,
        "startChar": 0,
        "endLine": 412,
        "endChar": 30
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67889810_2b585da0",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 412,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-03T01:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e35ff274_fa0e1a7d",
      "range": {
        "startLine": 411,
        "startChar": 0,
        "endLine": 412,
        "endChar": 30
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "846cd329_1cf967e0",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 415,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T20:48:05Z",
      "side": 1,
      "message": "This should be \"includes\"; see https://bazel.build/reference/be/c-cpp#cc_library",
      "range": {
        "startLine": 415,
        "startChar": 4,
        "endLine": 415,
        "endChar": 23
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8cd3096_8ad44cab",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 415,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-03T01:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "846cd329_1cf967e0",
      "range": {
        "startLine": 415,
        "startChar": 4,
        "endLine": 415,
        "endChar": 23
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a42da4_7a57e8d7",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 422,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-31T15:57:10Z",
      "side": 1,
      "message": "why not just `hdrs` ? That would be in alignment with `cc_library`.\n\n```\nhdrs\nThe list of header files published by this library to be directly included by sources in dependent rules.\n```\n\nhttps://bazel.build/reference/be/c-cpp#cc_library",
      "range": {
        "startLine": 422,
        "startChar": 4,
        "endLine": 422,
        "endChar": 17
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d77a5fcf_89d44bba",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 422,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T06:21:05Z",
      "side": 1,
      "message": "hdrs doesn\u0027t get exported. See CL:1918022 and CL:2199429\n\nexported_hdrs means that, if another module depends on `drivers/staging/android/delay_init`, it will get `:gs101_soc_ddk_headers` automatically. Though, In this specific case, `hdrs` also works because there are no other modules depending on it.",
      "parentUuid": "05a42da4_7a57e8d7",
      "range": {
        "startLine": 422,
        "startChar": 4,
        "endLine": 422,
        "endChar": 17
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "439dca57_79d416d2",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 422,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-09-01T15:55:03Z",
      "side": 1,
      "message": "`hdrs` should be the one that gets exported (like in `cc_library`). If the headers are just for local use they should be passed as `srcs` if in the package or as deps (if via another ddk_module or ddk_headers).\n\nso, in my understanding we should have (B depending on A), pseudo:\n\n```\nddk_headers(\n  name \u003d \"some_headers\",\n  srcs \u003d [\"some.h\"],\n)\n\nddk_headers(\n  name \u003d \"some_other_headers\",\n  srcs \u003d [\"some_other.h\"],\n)\n\nddk_module(\n  name \u003d \"modA\",\n  srcs \u003d [\"modA.c\",              # local source\n          \"modA_internal.h\",]    # local header (not exported)\n  hdrs \u003d [\":some_other_headers\", # re-published and internal used\n          \"modA.h\",]             # published from package and for internal use\n  deps \u003d [\":some_headers\",]      # internal use\n)\n\nddk_module(\n  name \u003d \"modB\",\n  srcs \u003d [\"modB.c\",              # local source\n          \"modB.h\",]             # local source\n  deps \u003d [\":modA\",]              # makes available via A:\n                                    - :some_other_headers\n                                    - modA.h\n)\n```\n\nDid I cover all cases that we can have here?",
      "parentUuid": "d77a5fcf_89d44bba",
      "range": {
        "startLine": 422,
        "startChar": 4,
        "endLine": 422,
        "endChar": 17
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17f77271_7f5654b9",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 422,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T20:48:05Z",
      "side": 1,
      "message": "With your current setup:\n\n- srcs: all local files (real files + filegroups, no providers other than DefaultInfo is examined)\n- hdrs: all re-published headers (can be real files or ddk_headers)\n- deps: all internal use targets:\n  - If ddk_module, will depend on their Module.symvers\n  - If ddk_headers, will include their directory\n  - Nothing is re-published from there\n\nHere\u0027s a few suggestions I have on your current setup:\n\n- It appears to be a bit clobbering in deps because it can contain both ddk_headers and ddk_modules\n- If hdrs can contain real files, then `ddk_module` also needs an `export_include_dirs` attribute like `ddk_headers` do. I think it is more isolated to not allow real files in `hdrs` and request caller to specify a different `ddk_headers` rule; this can make each target focus on a smaller thing.",
      "parentUuid": "439dca57_79d416d2",
      "range": {
        "startLine": 422,
        "startChar": 4,
        "endLine": 422,
        "endChar": 17
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd6262a_721be1b0",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 422,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T22:21:06Z",
      "side": 1,
      "message": "On a second thought, I\u0027ll add the `export_include_dirs` attribute to ddk_module.",
      "parentUuid": "17f77271_7f5654b9",
      "range": {
        "startLine": 422,
        "startChar": 4,
        "endLine": 422,
        "endChar": 17
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79d2966c_d269becd",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 422,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-03T01:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccd6262a_721be1b0",
      "range": {
        "startLine": 422,
        "startChar": 4,
        "endLine": 422,
        "endChar": 17
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cc3afc9_7ca0096a",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 453,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-31T15:57:10Z",
      "side": 1,
      "message": "those headers seem to be used during compilation only. As such they should be `srcs`. Again, this is to align with `cc_library`:\n\n```\nsrcs\n\nThe list of C and C++ files that are processed to create the target. These are C/C++ source and header files, either non-generated (normal source code) or generated.\n```",
      "range": {
        "startLine": 453,
        "startChar": 4,
        "endLine": 453,
        "endChar": 8
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db18dfd9_518d1f9f",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 453,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T06:21:05Z",
      "side": 1,
      "message": "I also need them to change the output of Makefile to add -I option.\n\nAre you suggesting that I should combine hdrs into srcs, and rename exported_hdrs into hdrs?",
      "parentUuid": "7cc3afc9_7ca0096a",
      "range": {
        "startLine": 453,
        "startChar": 4,
        "endLine": 453,
        "endChar": 8
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6527b5c_4c4dfe0b",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 453,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-09-01T15:55:03Z",
      "side": 1,
      "message": "see my other suggestion.",
      "parentUuid": "db18dfd9_518d1f9f",
      "range": {
        "startLine": 453,
        "startChar": 4,
        "endLine": 453,
        "endChar": 8
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d427b41_d507cd75",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 453,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-03T01:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6527b5c_4c4dfe0b",
      "range": {
        "startLine": 453,
        "startChar": 4,
        "endLine": 453,
        "endChar": 8
      },
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9b5ad20_3e25d8f0",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 461,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-31T15:57:10Z",
      "side": 1,
      "message": "the kernel_build should be inherited from the modules and it should be checked for consistency among them (similar to how we inherit and check the toolchain).",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70c7566b_941c9761",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 461,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T06:23:15Z",
      "side": 1,
      "message": "The reason I require kernel_build is that kernel_modules_install works even if there are no kernel_modules.\n\nThough, maybe I should only require kernel_build when kernel_modules is empty...\n\nIt is a separate bug not specific to DDK, though.",
      "parentUuid": "a9b5ad20_3e25d8f0",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "695a41ce_d7e25912",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 461,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-09-01T15:55:03Z",
      "side": 1,
      "message": "I think it is reasonable to expect at least one kernel_module in kernel_modules_install.",
      "parentUuid": "70c7566b_941c9761",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a30583c3_5cd853e0",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 461,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-09-01T22:07:11Z",
      "side": 1,
      "message": "This is not the case for e.g. the GKI kernel:\n\nhttps://cs.android.com/android/kernel/superproject/+/common-android-mainline:build/kernel/kleaf/common_kernels.bzl;l\u003d520;drc\u003d427071a84cd1d599f474c75625d64b0f45819b24\n\nThe reason is that kernel_images requires a kernel_modules_install target b/212653676",
      "parentUuid": "695a41ce_d7e25912",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a41ece_adfea3d5",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 461,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-09-22T15:50:13Z",
      "side": 1,
      "message": "I think \"Though, maybe I should only require kernel_build when kernel_modules is empty...\" pretty much solves it. And would be intuitive. Perhaps even do this mutually exclusive: either `kernel_build` or `len(kernel_modules) \u003e 0`",
      "parentUuid": "a30583c3_5cd853e0",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "777f4e9d_71b13827",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-31T02:31:28Z",
      "side": 1,
      "message": "Maybe there\u0027s a way to declare a `kernel_module_group`. idk...",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98291ec7_3a88318e",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-31T04:27:58Z",
      "side": 1,
      "message": "s/there\u0027s/there needs to be/",
      "parentUuid": "777f4e9d_71b13827",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2cd66f9c_16bd4e73",
        "filename": "BUILD.bazel",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-31T05:55:20Z",
      "side": 1,
      "message": "CL:2201916",
      "parentUuid": "98291ec7_3a88318e",
      "revId": "90d93bf4f3e67a3d5cb1309140ae3d5104242232",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}